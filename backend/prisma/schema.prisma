generator client {
  provider      = "prisma-client-js"
  engineType = "binary"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                    String             @id @default(cuid())
  nip                                                   String             @unique
  nama                                                  String
  email                                                 String?
  password                                              String
  role                                                  Role               @default(STAFF)
  jenisKelamin                                          Gender
  tanggalLahir                                          DateTime?
  alamat                                                String?
  mobilePhone                                           String?
  pendidikanTerakhir                                    String?
  jabatan                                               String?
  golongan                                              String?
  status                                                String             @default("PNS")
  instansi                                              String             @default("BPS Kabupaten Pringsewu")
  kantor                                                String             @default("BPS Kabupaten Pringsewu")
  username                                              String             @unique
  profilePicture                                        String?
  isActive                                              Boolean            @default(true)
  createdAt                                             DateTime           @default(now())
  updatedAt                                             DateTime           @updatedAt
  adminExpiry                                           DateTime?
  primaryRole                                           String             @default("STAFF")
  roles                                                 String[]           @default([])
  attendances                                           Attendance[]
  generatedCerts                                        Certificate[]      @relation("CertificateGenerator")
  uploadedCerts                                         Certificate[]      @relation("CertificateUploader")
  certificates                                          Certificate[]      @relation("CertificateRecipient")
  ckpScores                                             CkpScore[]
  evaluationsGiven                                      Evaluation[]       @relation("Evaluator")
  evaluationsReceived                                   Evaluation[]       @relation("Target")
  finalEvaluations                                      FinalEvaluation[]

  @@map("users")
}

model Period {
  id               String             @id @default(cuid())
  tahun            Int
  bulan            Int
  namaPeriode      String
  isActive         Boolean            @default(false)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  attendances      Attendance[]
  certificates     Certificate[]
  ckpScores        CkpScore[]
  evaluations      Evaluation[]
  finalEvaluations FinalEvaluation[]

  @@unique([tahun, bulan])
  @@map("periods")
}

model EvaluationParameter {
  id               String            @id @default(cuid())
  namaParameter    String
  deskripsi        String?
  urutan           Int
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  evaluationScores EvaluationScore[]

  @@map("evaluation_parameters")
}

model Evaluation {
  id           String            @id @default(cuid())
  evaluatorId  String
  periodId     String
  targetUserId String
  status       EvaluationStatus  @default(DRAFT)
  submitDate   DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  scores       EvaluationScore[]
  evaluator    User              @relation("Evaluator", fields: [evaluatorId], references: [id])
  period       Period            @relation(fields: [periodId], references: [id])
  target       User              @relation("Target", fields: [targetUserId], references: [id])

  @@unique([evaluatorId, periodId, targetUserId])
  @@map("evaluations")
}

model EvaluationScore {
  id           String              @id @default(cuid())
  evaluationId String
  parameterId  String
  score        Int
  createdAt    DateTime            @default(now())
  evaluation   Evaluation          @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  parameter    EvaluationParameter @relation(fields: [parameterId], references: [id])

  @@unique([evaluationId, parameterId])
  @@map("evaluation_scores")
}

model Attendance {
  id               String   @id @default(cuid())
  userId           String
  periodId         String
  persentaseTotal  Float    @default(100.0)
  jumlahTidakKerja Int      @default(0)
  jumlahPulangAwal Int      @default(0)
  jumlahTelat      Int      @default(0)
  jumlahAbsenApel  Int      @default(0)
  jumlahCuti       Int      @default(0)
  penguranganTK    Float    @default(0.0)
  penguranganPSW   Float    @default(0.0)
  penguranganTLT   Float    @default(0.0)
  penguranganAPEL  Float    @default(0.0)
  penguranganCT    Float    @default(0.0)
  totalMinus       Float    @default(0.0)
  nilaiPresensi    Float    @default(100.0)
  keterangan       String?
  inputBy          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  adaAbsenApel     Boolean  @default(false)
  adaCuti          Boolean  @default(false)
  adaPulangAwal    Boolean  @default(false)
  adaTelat         Boolean  @default(false)
  adaTidakKerja    Boolean  @default(false)
  period           Period   @relation(fields: [periodId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@unique([userId, periodId])
  @@map("attendance")
}

model CkpScore {
  id         String   @id @default(cuid())
  userId     String
  periodId   String
  score      Float
  keterangan String?
  inputBy    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  period     Period   @relation(fields: [periodId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, periodId])
  @@map("ckp_scores")
}

model FinalEvaluation {
  id                String   @id @default(cuid())
  userId            String
  periodId          String
  berakhlakScore    Float    @default(0)
  presensiScore     Float    @default(0)
  ckpScore          Float    @default(0)
  berakhlakWeighted Float    @default(0)
  presensiWeighted  Float    @default(0)
  ckpWeighted       Float    @default(0)
  finalScore        Float    @default(0)
  totalEvaluators   Int      @default(0)
  isCandidate       Boolean  @default(false)
  ranking           Int?
  isBestEmployee    Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  period            Period   @relation(fields: [periodId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, periodId])
  @@map("final_evaluations")
}

model AspekPenilaian {
  id        String   @id @default(cuid())
  namaAspek String   @unique
  deskripsi String?
  bobot     Float
  urutan    Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("aspek_penilaian")
}

model RentangNilai {
  id        String   @id @default(cuid())
  kategori  String
  ranking   Int
  nilaiMin  Int
  nilaiMax  Int
  deskripsi String?
  createdAt DateTime @default(now())

  @@unique([kategori, ranking])
  @@map("rentang_nilai")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Add this to your existing Certificate model in schema.prisma

model Certificate {
  id                 String            @id @default(cuid())
  user_id            String
  period_id          String
  certificate_number String?           @db.VarChar(100)
  template_generated Boolean           @default(false)
  template_path      String?
  template_type      String?           @default("TTD_BASAH") // ðŸ”¥ NEW: Store template type
  is_uploaded        Boolean           @default(false)
  file_name          String?
  file_url           String?
  file_path          String?
  status             CertificateStatus @default(TEMPLATE_PENDING)
  generated_by       String?
  generated_at       DateTime?
  uploaded_by        String?
  uploaded_at        DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  // Relations
  period             Period            @relation(fields: [period_id], references: [id], onDelete: Cascade)
  generatedByUser    User?             @relation("CertificateGenerator", fields: [generated_by], references: [id])
  uploadedByUser     User?             @relation("CertificateUploader", fields: [uploaded_by], references: [id])
  user               User              @relation("CertificateRecipient", fields: [user_id], references: [id])

  @@index([period_id])
  @@index([status])
  @@index([user_id, period_id])
  @@index([template_type]) // ðŸ”¥ NEW: Index for template type queries
  @@map("certificates")
}

enum Role {
  STAFF
  ADMIN
  PIMPINAN
}

enum Gender {
  LK
  PR
}

enum EvaluationStatus {
  DRAFT
  SUBMITTED
}

enum CertificateStatus {
  TEMPLATE_PENDING
  TEMPLATE_GENERATED
  PROCESSING
  COMPLETED
}
